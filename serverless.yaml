service: serverless-todo
frameworkVersion: '3'

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs16.x
  architecture: arm64
  stage: dev
  region: ${opt:region, "us-east-1"}
  memorySize: 128
  timeout: 29 # Lambda timeout = API Gateway default timeout
  versionFunctions: false
  logRetentionInDays: 14
  iam:
    role:
      statements:
        # Allow access to DynamoDB tables
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:custom.tableName}
  environment:
    TABLE_NAME: ${self:custom.tableName}

custom:
  tableName: todo-table-${sls:stage}
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true

functions:
  addNote:
    handler: src/functions/note/add-note.handler
    name: ${self:service}-addNote-${sls:stage}
    description: add a note
    events:
      - httpApi:
          method: post
          path: /notes
  listNotes:
    handler: src/functions/note/list-notes.handler
    name: ${self:service}-listNotes-${sls:stage}
    description: list all notes
    events:
      - httpApi:
          method: get
          path: /notes

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      # DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: noteId
            AttributeType: S
        KeySchema:
          - AttributeName: noteId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
